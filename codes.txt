// Basic array operations

#include <stdio.h>

int arr[50], N;

void create();
void insert();
void erase();
void display();

int main()
{
    while (1)
    {
        int choice;
        printf(
            "\n"
            "\n 1. Create"
            "\n 2. Insert"
            "\n 3. Delete"
            "\n 4. Display"
            "\n -> ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            create();
            break;
        case 2:
            insert();
            break;
        case 3:
            erase();
            break;
        case 4:
            display();
            break;
        default:
            return 0;
        }
    }
}


void create()
{
    printf(" Enter no. of elements: ");
    scanf("%d", &N);
    int i = 0;

    printf(" Enter elements: ");
    for (; i < N; i++)
        scanf("%d", &arr[i]);
}

void insert()
{
    if (N == 50)
    {
        printf("\n Overflow !");
        return;
    }

    int index, value;
    printf(" Enter index: ");
    scanf("%d", &index);
    printf(" Enter value: ");
    scanf("%d", &value);

    int i = N;
    for (; i >= index; i--)
        arr[i] = arr[i - 1];

    arr[index] = value;
    N++;
}

void erase()
{
    if (N == 0)
    {
        printf("\n Underflow !");
        return;
    }
    int index;
    printf(" Enter index: ");
    scanf("%d", &index);

    int i = index;
    for (; i < N; i++)
        arr[i] = arr[i + 1];

    N--;
}

void display()
{
    if (N == 0)
    {
        printf("\n Empty ! ");
        return;
    }

    printf("    [ ");
    int i = 0;
    for (; i < N; i++)
        printf("%d ", arr[i]);
    printf(" ]");
}

######################################################################################################
// Pattern replacemnt

#include <stdio.h>

int main()
{
    char str[50], pat[50], rep[50], res[50];

    printf(" Enter String: ");
    gets(str);

    printf(" Enter Pattern: ");
    gets(pat);

    printf(" Enter Replacement: ");
    gets(rep);

    int i = 0, j, k = 0;
    int not_found = 1;
    for (; i < str[i] != 0;)
    {
        j = 0;
        for (; j < pat[j] != 0 && str[i + j] == pat[j]; j++)
            ;

        if (pat[j] == 0)
        {
            not_found = 0;
            int h = 0;
            for (; h < rep[h] != 0; h++)
                res[k++] = rep[h];
            i += j;
        }
        else
            res[k++] = str[i++];
    }
    res[k] = 0;

    if (not_found == 1)
        printf("\n Pattern Doesn't Exist");

    else
        printf("\n New String: %s", res);
}

#######


##########################################################################################################

//satck

#include<stdio.h>
#include<math.h>
#define max 10
int stack_list[max],top=-1;
void push(int m)
{
    if(top==max-1)
        printf("\n Stack overflow");
    else
    {
        top++;
        stack_list[top]=m;
    }
}
int pop()
{ 
    if(top==-1)
    {
        printf("\n Stack underflow");
        return -1;
    }
    else
        return stack_list[top--];
}
void display()
{
    int i;
    if(top==-1)
        printf("\n Stack is empty");
    else
    {    
        printf("\n The elements are");
        for(i=top;i>=0;i--)
            printf("%d\t",stack_list[i]);
    }
}
void palindrome()
{
    int n,num,rem,i;
    printf("\n Enter n");
    scanf("%d",&n);
    top=-1;
    num=n;
    while(num!=0)
    {
        rem=num%10;
        push(rem);
        num=num/10;
    }
    num=0;
    for(i=0;top!=-1;i++)
        num=pop()*pow(10,i)+num;
    
    if(n==num)
        printf("\n It is a palindrome");
    else
        printf("\n It is not a palindrome");
}
int main()
{
    int c,m;
    while(1)
    {    printf("\n Enter 1-push\n2-pop\n3-display\n4-palindrome");
        scanf("%d",&c);
        switch(c)
        {
            case 1:    printf("\n Enter an element\t");
                     scanf("%d",&m);
                     push(m);
                     break;
            case 2: printf("\n The popped elementis %d",pop());
                    break;
            case 3:    display();
                    break;
            case 4:    palindrome();
                    break;
            default:return 0;
        }
    }
}
####################################################################################
//infix to postfix
#include <stdio.h>

int precedence(char op)
{
    switch(op){
        case '#': return 1;
        case '+':
        case '-': return 2;
        case '/':
        case '*': return 3;
        case '^': return 4;
    }

    return 0;
}

int main(){
    char infix[50];
    printf("Enter the infix expression:\n");
    scanf("%s", infix);

    char postfix[50] = "";

    char stack[50] = "#";
    int top = 0;

    int i;
    int k = 0;

    for(i = 0; infix[i] != 0; i++){
        if(infix[i] == '(')
            stack[++top] = '(';
        
        else if(infix[i] == ')'){
            while(top > 0 && stack[top] != '(')
                postfix[k++] = stack[top--];
            
            top--;
        }
        else if(precedence(infix[i]) == 0)
            postfix[k++] = infix[i];

        else {
            while(top > 0 && precedence(infix[i]) <= precedence(stack[top]))
                postfix[k++] = stack[top--];
            
            stack[++top] = infix[i];
        }
    }

    while(top > 0){
        postfix[k++] = stack[top--];
    }
    
    printf("Postfix Expression: %s", postfix);
}
###################################################################################################
//5. a
#include<stdio.h>
#include<math.h>
#include<ctype.h>
int stack[30];
int top=-1;
void push(int ele)
{
    stack[++top]=ele;
}
int pop()
{
    return (stack[top--]);
}
int evaluate(int a, char op, int b)
{
    switch(op)
    {
        case '+':return(a+b);
        case '-':return(a-b);
        case '*':return(a*b);
        case '/':return(a/b);
        case '%':return(a%b);
        case '^':return(pow(a,b));
        default :return 0;
    }
}
int main()
{
    char postfix[100];
    int i, op1, op2;
    printf("\n Enter the expression");
    scanf("%s",postfix); // input expression
    for(i=0;postfix[i]!='\0';i++) //scan expression from l to r till end of string
    {
        if(isdigit(postfix[i])) // check if a input character is a digit
            push(postfix[i]-'0'); 
        else // if an operator 
        {
            op2=pop();
            op1=pop();
            push(evaluate(op1,postfix[i],op2)); // calculate op1 'operator', op2 and insert into stack
        }
    }
     printf("Evaluated expression value is %d",pop());
}

##############################################################################################3
//5b
#include<stdio.h>
int count=0;
void tower(int n,char S,char T,char D)
{
    if(n==1)
    {
        printf("\n Move Disc %d from %c to %c",n,S,D);
        count++;
    }
    else
    {
        tower(n-1,S,D,T);
        printf("\n Move Disc %d from %c to %c",n,S,D);
        count++;
        tower(n-1,T,S,D);
    }
}
int main()
{
    int n;
    printf("\n Enter number of disks\n");
    scanf("%d",&n);
    tower(n,'A','B','C');
    printf("\nNo. of Disc Moves =%d",count);
    return 0;
}

#################################################################################################3
//6
#include<stdio.h>
#include<stdlib.h>
//#define size 5

void cqinsert(char queue[], int *rear, int *count,int *n);
void cqdelete(char queue[], int *front, int *count,int *n);
void display(char queue[], int front, int count,int *n);

void main()
{
	
	int front = 0, rear = -1, ch, count = 0, n =0;
    printf("\nEnter the size of the queue:........\n");
	scanf("%d",&n);
    char queue[n];
	while(1)
	{
		printf("\nMenu\n");
        printf("\nEntered size is queue is %d\n",n);
        printf("1. Insert\n2. Delete\n3. Display\n4. Exit\n");
		scanf("%d", &ch);
		switch(ch)
		{
			case 1:
				if(count == n)
					printf("Queue is Full(Overflow)\n");
				else
					cqinsert(queue, &rear, &count, &n);
				break;
			case 2:
				if(count == 0)
					printf("Queue is Empty(Underflow)\n");
				else
					cqdelete(queue, &front, &count,&n);
				break;
			case 3:
				if(count == 0)
					printf("Queue is Empty(Underflow)\n");
				else
					display(queue, front, count,&n);
				break;
            case 4:
				exit(0);
		}
	}
}

void cqinsert(char queue[], int *rear, int *count,int *n)
{
	//int n;
    char ele;
	printf("Enter a Character\n");
	scanf(" %c", &ele);
	*rear = (*rear + 1) % *n;
	queue[*rear] = ele;
	(*count)++;
}

void cqdelete(char queue[], int *front, int *count,int *n)
{
	printf("Deleted Character is %c\n", queue[*front]);
	*front = (*front + 1) % *n;
	(*count)--;
}

void display(char queue[], int front, int count,int *n)
{
	int i;
	printf("The Characters are\n");
	for(i=0; i<count; i++)
	{
		printf("%c\t", queue[front]);
		front = (front + 1) % *n;
	}
	printf("\n");
}

################################################################################################3
// 7. Design, Develop and Implement a menu driven Program in C for the following operations on
// Singly Linked List (SLL) of Student Data with the fields: USN, Name, Programme, Sem,
// PhNo
// a. Create a SLL of N Students Data by using front insertion.
// b. Display the status of SLL and count the number of nodes in it
// c. Perform Insertion / Deletion at End of SLL
// d. Perform Insertion / Deletion at Front of SLL(Demonstration of stack)
// e. Exit

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct node
{
    char name[30];
    int ph_num;
    char dept[20];
    char usn[20];
    int sem;
    struct node *next;
};
typedef struct node NODE;
NODE *head = NULL;
NODE *getnode()
{
    NODE *nd;
    nd = (NODE *)malloc(sizeof(NODE));
    printf("Enter the name \n");
    scanf("%s", nd->name);
    printf("Enter the Phone_number\n");
    scanf("%d", &nd->ph_num);
    printf("Enter the Department\n");
    scanf("%s", nd->dept);
    printf("Enter the Semester\n");
    scanf("%d", &nd->sem);
    printf("Enter the USN\n");
    scanf("%s", nd->usn);
    nd->next = NULL;
    return (nd);
}
void insert_end()
{
    NODE *newnode, *curptr = head;
    newnode = getnode();
    if (head == NULL)
    {
        head = newnode;
    }
    else
    {
        while (curptr->next != NULL)
        {
            curptr = curptr->next;
        }
        curptr->next = newnode;
        newnode->next = NULL;
    }
}

void insert_front()
{
    NODE *newnode;
    newnode = getnode();
    if (head == NULL)
    {
        head = newnode;
        head->next = NULL;
    }
    else
    {
        newnode->next = head;
        head = newnode;
    }
}
void delete_front()
{
    NODE *curptr;
    if (head == NULL)
    {
        printf("EMPTY....\n");
    }
    else
    {
        curptr = head;
        head = head->next;
        free(curptr);
    }
}
void delete_end()
{
    NODE *curptr = head, *prev = NULL;
    if (head == NULL)
    {
        printf("EMPTY....\n");
    }
    else
    {
        while (curptr->next != NULL)
        {
            prev = curptr;
            curptr = curptr->next;
        }
        free(curptr);
        prev->next = NULL;
    }
}
void display()
{
    NODE *curptr = head;
    printf("\nNAME\t\tUSN\t\tDEPARTMENT\t\tSEMESTER\t\tphone.no\n");
    while (curptr != NULL)
    {

        printf("\n%s\t\t%s\t\t%s\t\t\t%d\t\t%d", curptr->name, curptr->usn, curptr->dept, curptr->sem, curptr->ph_num);
        curptr = curptr->next;
    }
}
int main()
{
    int choice;
    while (1)
    {
        printf("\n 1)-> insert_front\n2)-> insert_end\n3)-> delte_front\n4)-> delete_end\n5)-> dispaly\n");
        printf("Enter the choice\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            insert_front();
            break;
        case 2:
            insert_end();
            break;
        case 3:
            delete_front();
            break;
        case 4:
            delete_end();
            break;
        case 5:
            display();
            break;
        default:
            exit(0);
        }
    }
    return 0;
}

##############################################################################
// 8. Design, Develop and Implement a menu driven Program in C for the following operations on
// Doubly Linked List (DLL) of Employee Data with the fields: SSN, Name, Dept, Designation,
// Sal, PhNo
// a. Create a DLL of N Employees Data by using end insertion.
// b. Display the status of DLL and count the number of nodes in it
// c. Perform Insertion and Deletion at End of DLL
// d. Perform Insertion and Deletion at Front of DLL
// e. Demonstrate how this DLL can be used as Double Ended Queue.
// f. Exit

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct node
{
    char name[30];
    int ph_num;
    char dept[20];
    int sal;
    int ssn;
    char deg[20];
    struct node *next, *prev;
};
typedef struct node NODE;
NODE *head = NULL;
NODE *getnode()
{
    NODE *nd;
    nd = (NODE *)malloc(sizeof(NODE));
    printf("Enter the SSN\n");
    scanf("%d", &nd->ssn);
    printf("Enter the name \n");
    scanf("%s", nd->name);
    printf("Enter the Phone_number\n");
    scanf("%d", &nd->ph_num);
    printf("Enter the Department\n");
    scanf("%s", nd->dept);
    printf("Enter the Designation\n");
    scanf("%s", nd->deg);
    printf("Enter the salary\n");
    scanf("%d", &nd->sal);
    nd->next = NULL;
    nd->prev = NULL;
    return (nd);
}
void insert_end()
{
    NODE *newnode, *curptr = head;
    newnode = getnode();
    if (head == NULL)
    {
        head = newnode;
    }
    else
    {
        while (curptr->next != NULL)
        {
            curptr = curptr->next;
        }
        curptr->next = newnode;
        newnode->prev = curptr;
        newnode->next = NULL;
    }
}

void insert_front()
{
    NODE *newnode;
    newnode = getnode();
    if (head == NULL)
    {
        head = newnode;
        head->next = NULL;
        head->prev = NULL;
    }
    else
    {
        newnode->next = head;
        newnode->prev = NULL;
        head->prev = newnode;
        head = newnode;
    }
}
void delete_front()
{
    NODE *curptr;
    if (head == NULL)
    {
        printf("EMPTY....\n");
    }
    else
    {
        curptr = head;
        head = head->next;
        head->prev = NULL;
        free(curptr);
    }
}
void delete_end()
{
    NODE *curptr = head, *temp;
    if (head == NULL)
    {
        printf("EMPTY....\n");
    }
    else
    {
        while (curptr->next != NULL)
        {
            curptr = curptr->next;
        }
        curptr->prev->next = NULL;
        free(curptr);
    }
}
void display()
{
    NODE *curptr = head;
    int count = 0;
    printf("\nSSN\tNAME\tDesignation\tDEPARTMENT\tsalary\t\tphone.no\n");
    while (curptr != NULL)
    {

        printf("\n%d\t%s\t%s\t%s\t\t%d\t\t%d\n", curptr->ssn, curptr->name, curptr->deg, curptr->dept, curptr->sal, curptr->ph_num);
        curptr = curptr->next;
        count += 1;
    }
    printf("\nthe no. of node is %d\n", count);
}
int main()
{
    int choice;
    while (1)
    {
        printf("\n 1)-> insert_front\n2)-> insert_end\n3)-> delte_front\n4)-> delete_end\n5)-> dispaly\n");
        printf("Enter the choice\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            insert_front();
            break;
        case 2:
            insert_end();
            break;
        case 3:
            delete_front();
            break;
        case 4:
            delete_end();
            break;
        case 5:
            display();
            break;
        default:
            exit(0);
        }
    }
    return 0;
}
###################################################################################################
// 9. Design, Develop and Implement a Program in C for the following operationson Singly
// Circular Linked List (SCLL) with header nodes
// a. Represent and Evaluate a Polynomial P(x,y,z) = "use given equation"
// b. Find the sum of two polynomials POLY1(x,y,z) and POLY2(x,y,z) and store the
// result in POLYSUM(x,y,z)
// Support the program with appropriate functions for each of the above operations

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
struct term
{
    int coef;
    int exp1, exp2, exp3;
    struct term *next;
};
typedef struct term POLY;
POLY *getnode()
{
    POLY *nd;
    nd = (POLY *)malloc(sizeof(POLY));
    printf("enter the co_efficient\n");
    scanf("%d", &nd->coef);
    printf("Enter the exponents of x , y and z \n");
    scanf("%d%d%d", &nd->exp1, &nd->exp2, &nd->exp3);
    nd->next = NULL;
    return nd;
}
POLY *create()
{
    POLY *temp, *p;
    int n, i;
    printf("enter the no of terms\n");
    scanf("%d", &n);
    p = (POLY *)malloc(sizeof(POLY));
    temp = p;
    POLY *newnode;
    for (i = 1; i <= n; i++)
    {
        newnode = getnode();
        temp->next = newnode;
        temp = temp->next;
    }
    temp->next = p;
    return p;
}
void evaluate(POLY *p)
{

    int x, y, z, sum = 0;
    printf("enter the values of x , y and z\n");
    scanf("%d%d%d", &x, &y, &z);
    POLY *temp = p->next;
    while (temp != p)
    {
        sum = sum + (temp->coef * pow(x, temp->exp1) * pow(y, temp->exp2) * pow(z, temp->exp3));
        temp = temp->next;
    }
    printf("The sum of the given term is %d\n", sum);
}
void display(POLY *p)
{
    POLY *temp = p->next;
    printf(" \nresultant polunomial is\n ");
    while (temp != p)
    {
        printf("%d x^%d y^%d z^%d", temp->coef, temp->exp1, temp->exp2, temp->exp3);
        if (temp->next != p)
            printf(" + ");
        temp = temp->next;
    }
    printf("\n");
}
POLY *addpoly(POLY *poly1, POLY *poly2)
{
    POLY *poly3 = (POLY *)malloc(sizeof(POLY));
    int flag, sum = 0;
    POLY *t3, *t1, *t2;
    t3 = poly3;
    t1 = poly1->next;
    t2 = poly2->next;
    while (t1 != poly1 && t2 != poly2)
    {
        if (t1->exp1 == t2->exp1 && t1->exp2 == t2->exp2 && t1->exp3 == t2->exp3)
            flag = 0;
        else if (t1->exp1 > t2->exp1 || t1->exp2 > t2->exp2 || t1->exp3 > t2->exp3)
            flag = 1;
        else if (t1->exp1 < t2->exp1 || t1->exp2 < t2->exp2 || t1->exp3 < t2->exp3)
            flag = -1;
        switch (flag)
        {
        case 0:
            sum = t1->coef + t2->coef;
            attach(sum, t1->exp1, t2->exp2, t2->exp3, t3);
            t2 = t2->next;
            t1 = t1->next;
            t3 = t3->next;
            t3->next = poly3;
            break;
        case 1:
            attach(t1->coef, t1->exp1, t1->exp2, t1->exp3, t3);
            t1 = t1->next;
            t3 = t3->next;
            t3->next = poly3;
            break;
        case -1:
            attach(t2->coef, t2->exp1, t2->exp2, t2->exp3, t3);
            t2 = t2->next;
            t3 = t3->next;
            t3->next = poly3;
            break;
        }
    }
    while (t1 != poly1)
    {
        attach(t1->coef, t1->exp1, t1->exp2, t1->exp3, t3);
        t1 = t1->next;
        t3 = t3->next;
    }
    while (t2 != poly2)
    {
        attach(t2->coef, t2->exp1, t2->exp2, t2->exp3, t3);
        t2 = t2->next;
        t3 = t3->next;
    }
    return poly3;
}
void attach(int coeff, int x, int y, int z, POLY *t3)
{

    POLY *temp = (POLY *)malloc(sizeof(POLY));
    temp->coef = coeff;
    temp->exp1 = x;
    temp->exp2 = y;
    temp->exp3 = z;
    temp->next = NULL;
    t3->next = temp;
}

int main()
{
    POLY *p = NULL, *poly1 = NULL, *poly2 = NULL;
    int choice;
    while (1)
    {
        printf("1)->create\n2)->display\n3)->evaluate\n4)->Addition\n");
        printf("enter your choice\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            p = create();
            break;
        case 2:
            display(p);
            break;
        case 3:
            evaluate(p);
            break;
        case 4:
            poly1 = create();
            display(poly1);
            poly2 = create();
            display(poly2);
            POLY *polysum = addpoly(poly1, poly2);
            display(polysum);
            break;

        default:
            exit(0);
        }
    }
    return 0;
}
##########################################################################################
// Design, Develop and Implement a menu driven Program in C for the following operations on  
// Binary Search Tree (BST) of Integers .                                  #Date:16/02/22
// a. Create a BST of N Integers: 6, 9, 5, 2, 8, 15, 24, 14, 7, 8, 5, 2 
// b. Traverse the BST in Inorder, Preorder and Post Order 
// Search the BST for a given element (KEY) and report the appropriate message d. Exit

#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *left, *right;
};
typedef struct node NODE;
NODE *getnode()
{
    NODE *nd;
    nd = (NODE *)malloc(sizeof(NODE));
    printf("enter the data:\n");
    scanf("%d", &nd->data);
    nd->left = NULL;
    nd->right = NULL;
    return nd;
}
NODE *insert(NODE *root, NODE *newnode)
{
    if (root == NULL)
    {
        root = newnode;
        return root;
    }
    else
    {
        if (newnode->data < root->data)
            root->left = insert(root->left, newnode);
        else if (newnode->data > root->data)
            root->right = insert(root->right, newnode);
        else
        {
            printf("Duplicate data cannot be iserted...\n");
            return root;
        }
    }
}
void preorder(NODE *ptr)
{
    if (ptr != NULL)
    {
        printf("%d  ", ptr->data);
        preorder(ptr->left);
        preorder(ptr->right);
    }
}
void postorder(NODE *ptr)
{
    if (ptr != NULL)
    {
        postorder(ptr->left);
        postorder(ptr->right);
        printf("%d  ", ptr->data);
    }
}
void search(int key,NODE *root)
{
    if (root->data=key)
    {
        printf("Hurrayyyyy!!  Element found.\n");
    }
    else if(root==NULL)
        printf("OOpssss! Element not found.\n");
    else if(key<root->data)
    {
        printf("I am left.\n ");
        search(key,root->left);
    }
    else{
        printf("I am right\n");
        search(key,root->right);
    }
}
int main()
{
    NODE *root = NULL, *newnode;
    int ele;
    int choice;
    while (1)
    {
        printf("\n1)->Insert\n2)Preorder\n3)Postorder\n4)Search\n");
        printf("enter the choice\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            newnode = getnode();
            root = insert(root, newnode);
            break;
        case 2:
            preorder(root);
            break;
        case 3:
            postorder(root);
            break;
        case 4:
            printf("enter the search element\n");
            scanf("%d",&ele);
            search(ele,root);
        default:
            exit(0);
        }
    }
}
#############################################################################################
// 11. Design, Develop and Implement a Program in C for the following operations on Graph(G)
// of Cities
// a. Create a Graph of N cities using Adjacency Matrix.
// b. Print all the nodes reachable from a given starting node in a digraph using DFS/BFS
// method

#include <stdio.h>
#include <stdlib.h>
int f = 0, r = -1, q[10];
void DFS(int graph[10][10], int n, int visited[], int u)
{
    visited[u] = 1;
    printf("%d  ", u);
    for (int i = 0; i < n; i++)
    {
        if (visited[i] == 0 && graph[u][i] == 1)
            DFS(graph, n, visited, i);
    }
}
void BFS(int graph[10][10], int n, int visited[], int u)
{
    int vertex, i;
    visited[u] = 1;
    printf("%d  ", u);
    enque(q, u);
    while (f != r + 1)
    {
        vertex = dqueue(q);
        for (int i = 0; i < n; i++)
        {
            if (graph[vertex][i] == 1 && visited[i] == 0)
            {
                printf("%d  ", i);
                visited[i] = 1;
                enque(q, i);
            }
        }
    }
}
void enque(int q[10], int key)
{
    r++;
    q[r] = key;
}
int dqueue(int q[10])
{
    int item = q[f];
    f++;
    return item;
}
int main()
{
    int graph[10][10], i, j, choice, n, visited[10], v, u;
    printf("enter the number of vertices\n");
    scanf("%d", &n);
    printf("enter the adjecency matrix :\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);
    }
    printf("1)--> DFS\n2)-->BFS\n");
    printf("enter the choice\n");
    scanf("%d", &choice);
    if (choice == 1)
    {
        for (i = 0; i < n; i++)
            visited[i] = 0;
        printf("Enter the starting vertix\n");
        scanf("%d", &v);
        printf("The traversal in DFS is..\n ");
        DFS(graph, n, visited, v);
    }
    else
    {
        for (i = 0; i < n; i++)
            visited[i] = 0;
        printf("enter the starting vertix");
        scanf("%d", &u);
        printf("the traversal in BFS is...\n");
        BFS(graph, n, visited, u);
    }

    return 0;
}
#######################################################################################
// Given a File of N employee records with a set K of Keys (4-digit) which uniquely determine the
// records in file F. Assume that file F is maintained in memory by a Hash Table (HT) of m
// memory locations with L as the set of memory addresses (2-digit) of locations in HT. Let the
// keys in K and addresses in L are Integers. Design and develop a Program in C that uses Hash     #23/02/2022
// function H: K →L as H(K)=K mod m (remainder method), and implement hashing technique to
// map a given key K to the address space L. Resolve the collision (if any) using linear probing.

#include <stdio.h>
#include <stdlib.h>
#define BTsize 5
void linear_probe(int a[], int hbucket, int key)
{
    int cbucket;
    if (a[hbucket] == 0)
    {
        a[hbucket] = key;
        printf("\nData inserted successfully in position %d\n", hbucket);
    }
    else
    {
        printf("\ncollision detected\n");
        cbucket = hbucket + 1;
        while (cbucket != hbucket && a[cbucket] != 0)
            cbucket = (cbucket + 1) % BTsize;
        if (a[cbucket] == 0)
        {
            a[cbucket] = key;
            printf("\ncollision resolved successsfully\n");
            printf("key is inserted %d\n", cbucket);
        }
        else
        {
            printf("hash table is full.");
        }
    }
}
void display(int a[])
{
    int i;
    printf("\nhash table is..\n");
    for (i = 0; i < BTsize; i++)
    {
        printf("%d  ", a[i]);
    }
}
void main()
{
    int a[BTsize], i, data, hashaddr;
    printf("\\Colission handling by linear probing\n ");
    for (i = 0; i < BTsize; i++)
        a[i] = 0;
    do
    {
        printf("enter the data\n");
        scanf("%4d", &data);
        hashaddr = data % BTsize;
        linear_probe(a, hashaddr, data);
        printf("DO you wish to continue (1-0)\n");
        scanf("%d", &i);
    } while (i);
    display(a);
}

